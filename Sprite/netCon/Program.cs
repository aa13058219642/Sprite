using System;
using System.Diagnostics;
using System.IO;

namespace netCon
{
    class Program
    {
        static void Main(string[] args)
        {
            Program p = new Program();
            //string result = p.run_cmd("ping.exe", "8.8.8.8 -n 2");
            //string result = p.runPython("C:\\test.py", "\"Form C#:\"");
            string result = p.runPyFunc(@"C:\\","test1","add","3,4");
            Console.WriteLine(result);

            Console.ReadKey();
        }

        public string runPyFunc(string path, string filename, string functionname, string parameter)
        {
            string cmd = string.Format("-c \"import sys;sys.path.append('{0}');import {1};print({1}.{2}({3}))\"", path, filename, functionname, parameter);
            return run_cmd("python.exe", cmd);
        }

        public string runPython(string filename, string cmd)
        {
            string cmd1 = string.Format("{0} {1}", filename, cmd);
            return run_cmd("python.exe", cmd1);
        }

        public string run_cmd(string program, string cmd)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = program;
            start.Arguments = cmd;
            start.UseShellExecute = false;          // Do not use OS shell
            start.CreateNoWindow = true;            // We don't need new window
            start.RedirectStandardOutput = true;    // Any output, generated by application will be redirected back
            start.RedirectStandardError = true;     // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string result = process.StandardError.ReadToEnd();
                    if (result == null || result == "")
                    {
                        result = reader.ReadToEnd();
                    }
                    return result;
                }
            }
        }
    }
}
